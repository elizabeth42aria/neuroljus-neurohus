# Neuroljus Neurohus Community
# Forum, privata cirklar och gemenskapsbyggande

import logging
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
from dataclasses import dataclass
import uuid
import json

logger = logging.getLogger(__name__)

@dataclass
class ForumKategori:
    """En kategori i forumet"""
    id: str
    namn: str
    beskrivning: str
    ikon: str
    f√§rg: str
    skapad: datetime
    aktiv: bool

@dataclass
class ForumTr√•d:
    """En tr√•d i forumet"""
    id: str
    kategori_id: str
    skapare_id: str
    titel: str
    inneh√•ll: str
    st√§ngd: bool
    pinnad: bool
    skapad: datetime
    senast_svar: datetime
    antal_svar: int
    antal_visningar: int
    modererad: bool

@dataclass
class ForumSvar:
    """Ett svar i en forumtr√•d"""
    id: str
    tr√•d_id: str
    f√∂rfattare_id: str
    inneh√•ll: str
    modererad: bool
    skapad: datetime
    redigerad: Optional[datetime]

@dataclass
class PrivatCirkel:
    """En privat cirkel f√∂r specifika grupper"""
    id: str
    namn: str
    beskrivning: str
    skapare_id: str
    medlemmar: List[str]
    privat: bool
    skapad: datetime
    aktiv: bool

class CommunityManager:
    """Hanterar community-funktionalitet"""
    
    def __init__(self):
        self.forum_kategorier = {}
        self.forum_tr√•dar = {}
        self.forum_svar = {}
        self.privata_cirklar = {}
        self._skapa_standard_kategorier()
    
    def _skapa_standard_kategorier(self):
        """Skapar standardforumkategorier"""
        kategorier = [
            ForumKategori(
                id="allm√§nt",
                namn="Allm√§nt",
                beskrivning="Allm√§nna diskussioner om LSS och neurodiversitet",
                ikon="üí¨",
                f√§rg="#3B82F6",
                skapad=datetime.now(),
                aktiv=True
            ),
            ForumKategori(
                id="boende",
                namn="Boende",
                beskrivning="Diskussioner om LSS-boenden och boendeformer",
                ikon="üè†",
                f√§rg="#10B981",
                skapad=datetime.now(),
                aktiv=True
            ),
            ForumKategori(
                id="assistans",
                namn="Assistans",
                beskrivning="Fr√•gor och tips om personlig assistans",
                ikon="ü§ù",
                f√§rg="#F59E0B",
                skapad=datetime.now(),
                aktiv=True
            ),
            ForumKategori(
                id="familj",
                namn="Familj",
                beskrivning="St√∂d och r√•d f√∂r familjer",
                ikon="üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
                f√§rg="#EF4444",
                skapad=datetime.now(),
                aktiv=True
            ),
            ForumKategori(
                id="forskning",
                namn="Forskning",
                beskrivning="Senaste forskning och utveckling",
                ikon="üî¨",
                f√§rg="#8B5CF6",
                skapad=datetime.now(),
                aktiv=True
            )
        ]
        
        for kategori in kategorier:
            self.forum_kategorier[kategori.id] = kategori
        
        logger.info(f"Skapade {len(kategorier)} forumkategorier")
    
    def h√§mta_kategorier(self) -> List[Dict[str, Any]]:
        """H√§mtar alla aktiva forumkategorier"""
        return [
            {
                'id': kategori.id,
                'namn': kategori.namn,
                'beskrivning': kategori.beskrivning,
                'ikon': kategori.ikon,
                'f√§rg': kategori.f√§rg,
                'skapad': kategori.skapad.isoformat(),
                'antal_tr√•dar': len([t for t in self.forum_tr√•dar.values() 
                                   if t.kategori_id == kategori.id])
            }
            for kategori in self.forum_kategorier.values() if kategori.aktiv
        ]
    
    def skapa_tr√•d(self, kategori_id: str, skapare_id: str, 
                   titel: str, inneh√•ll: str) -> Dict[str, Any]:
        """Skapar en ny forumtr√•d"""
        if kategori_id not in self.forum_kategorier:
            return {'fel': 'Kategori inte hittad'}
        
        tr√•d_id = str(uuid.uuid4())
        tr√•d = ForumTr√•d(
            id=tr√•d_id,
            kategori_id=kategori_id,
            skapare_id=skapare_id,
            titel=titel,
            inneh√•ll=inneh√•ll,
            st√§ngd=False,
            pinnad=False,
            skapad=datetime.now(),
            senast_svar=datetime.now(),
            antal_svar=0,
            antal_visningar=0,
            modererad=False
        )
        
        self.forum_tr√•dar[tr√•d_id] = tr√•d
        
        logger.info(f"Skapade forumtr√•d: {titel}")
        
        return {
            'meddelande': 'Tr√•d skapad framg√•ngsrikt',
            'tr√•d_id': tr√•d_id,
            'tr√•d': self._tr√•d_till_dict(tr√•d)
        }
    
    def h√§mta_tr√•dar(self, kategori_id: str = None, 
                    sida: int = 1, per_sida: int = 20) -> Dict[str, Any]:
        """H√§mtar forumtr√•dar med paginering"""
        tr√•dar = list(self.forum_tr√•dar.values())
        
        if kategori_id:
            tr√•dar = [t for t in tr√•dar if t.kategori_id == kategori_id]
        
        # Sortera efter senaste aktivitet
        tr√•dar.sort(key=lambda t: t.senast_svar, reverse=True)
        
        # Paginering
        start_index = (sida - 1) * per_sida
        end_index = start_index + per_sida
        tr√•dar_sida = tr√•dar[start_index:end_index]
        
        return {
            'tr√•dar': [self._tr√•d_till_dict(tr√•d) for tr√•d in tr√•dar_sida],
            'paginering': {
                'sida': sida,
                'per_sida': per_sida,
                'total': len(tr√•dar),
                'antal_sidor': (len(tr√•dar) + per_sida - 1) // per_sida
            }
        }
    
    def h√§mta_tr√•d(self, tr√•d_id: str) -> Optional[Dict[str, Any]]:
        """H√§mtar en specifik tr√•d med svar"""
        if tr√•d_id not in self.forum_tr√•dar:
            return None
        
        tr√•d = self.forum_tr√•dar[tr√•d_id]
        
        # √ñka visningsr√§knare
        tr√•d.antal_visningar += 1
        
        # H√§mta svar
        svar = [s for s in self.forum_svar.values() if s.tr√•d_id == tr√•d_id]
        svar.sort(key=lambda s: s.skapad)
        
        return {
            'tr√•d': self._tr√•d_till_dict(tr√•d),
            'svar': [self._svar_till_dict(s) for s in svar]
        }
    
    def skapa_svar(self, tr√•d_id: str, f√∂rfattare_id: str, 
                   inneh√•ll: str) -> Dict[str, Any]:
        """Skapar ett svar p√• en tr√•d"""
        if tr√•d_id not in self.forum_tr√•dar:
            return {'fel': 'Tr√•d inte hittad'}
        
        tr√•d = self.forum_tr√•dar[tr√•d_id]
        
        if tr√•d.st√§ngd:
            return {'fel': 'Tr√•den √§r st√§ngd f√∂r nya svar'}
        
        svar_id = str(uuid.uuid4())
        svar = ForumSvar(
            id=svar_id,
            tr√•d_id=tr√•d_id,
            f√∂rfattare_id=f√∂rfattare_id,
            inneh√•ll=inneh√•ll,
            modererad=False,
            skapad=datetime.now(),
            redigerad=None
        )
        
        self.forum_svar[svar_id] = svar
        
        # Uppdatera tr√•dstatistik
        tr√•d.antal_svar += 1
        tr√•d.senast_svar = datetime.now()
        
        logger.info(f"Skapade svar p√• tr√•d: {tr√•d.titel}")
        
        return {
            'meddelande': 'Svar skapat framg√•ngsrikt',
            'svar_id': svar_id,
            'svar': self._svar_till_dict(svar)
        }
    
    def skapa_privat_cirkel(self, namn: str, beskrivning: str, 
                           skapare_id: str, medlemmar: List[str]) -> Dict[str, Any]:
        """Skapar en privat cirkel"""
        cirkel_id = str(uuid.uuid4())
        
        # L√§gg till skaparen som medlem
        alla_medlemmar = [skapare_id] + medlemmar
        alla_medlemmar = list(set(alla_medlemmar))  # Ta bort dubletter
        
        cirkel = PrivatCirkel(
            id=cirkel_id,
            namn=namn,
            beskrivning=beskrivning,
            skapare_id=skapare_id,
            medlemmar=alla_medlemmar,
            privat=True,
            skapad=datetime.now(),
            aktiv=True
        )
        
        self.privata_cirklar[cirkel_id] = cirkel
        
        logger.info(f"Skapade privat cirkel: {namn}")
        
        return {
            'meddelande': 'Privat cirkel skapad framg√•ngsrikt',
            'cirkel_id': cirkel_id,
            'cirkel': self._cirkel_till_dict(cirkel)
        }
    
    def h√§mta_anv√§ndares_cirklar(self, anv√§ndare_id: str) -> List[Dict[str, Any]]:
        """H√§mtar cirklar som anv√§ndaren √§r medlem i"""
        anv√§ndares_cirklar = []
        
        for cirkel in self.privata_cirklar.values():
            if anv√§ndare_id in cirkel.medlemmar:
                anv√§ndares_cirklar.append(self._cirkel_till_dict(cirkel))
        
        return anv√§ndares_cirklar
    
    def l√§gg_till_medlem_i_cirkel(self, cirkel_id: str, anv√§ndare_id: str) -> Dict[str, Any]:
        """L√§gger till en medlem i en privat cirkel"""
        if cirkel_id not in self.privata_cirklar:
            return {'fel': 'Cirkel inte hittad'}
        
        cirkel = self.privata_cirklar[cirkel_id]
        
        if anv√§ndare_id in cirkel.medlemmar:
            return {'fel': 'Anv√§ndaren √§r redan medlem'}
        
        cirkel.medlemmar.append(anv√§ndare_id)
        
        logger.info(f"Lade till medlem i cirkel: {cirkel.namn}")
        
        return {
            'meddelande': 'Medlem tillagd framg√•ngsrikt',
            'cirkel': self._cirkel_till_dict(cirkel)
        }
    
    def ta_bort_medlem_fr√•n_cirkel(self, cirkel_id: str, anv√§ndare_id: str) -> Dict[str, Any]:
        """Tar bort en medlem fr√•n en privat cirkel"""
        if cirkel_id not in self.privata_cirklar:
            return {'fel': 'Cirkel inte hittad'}
        
        cirkel = self.privata_cirklar[cirkel_id]
        
        if anv√§ndare_id not in cirkel.medlemmar:
            return {'fel': 'Anv√§ndaren √§r inte medlem'}
        
        if anv√§ndare_id == cirkel.skapare_id:
            return {'fel': 'Skaparen kan inte tas bort fr√•n cirkeln'}
        
        cirkel.medlemmar.remove(anv√§ndare_id)
        
        logger.info(f"Tog bort medlem fr√•n cirkel: {cirkel.namn}")
        
        return {
            'meddelande': 'Medlem borttagen framg√•ngsrikt',
            'cirkel': self._cirkel_till_dict(cirkel)
        }
    
    def moderera_inneh√•ll(self, inneh√•ll_id: str, inneh√•ll_typ: str, 
                          moderering: Dict[str, Any]) -> Dict[str, Any]:
        """Modererar forumtr√•dar och svar"""
        try:
            if inneh√•ll_typ == 'tr√•d':
                if inneh√•ll_id in self.forum_tr√•dar:
                    tr√•d = self.forum_tr√•dar[inneh√•ll_id]
                    tr√•d.modererad = moderering.get('godk√§nd', False)
                    
                    if moderering.get('st√§ng'):
                        tr√•d.st√§ngd = True
                    
                    if moderering.get('pinna'):
                        tr√•d.pinnad = True
                    
                    return {'meddelande': 'Tr√•d modererad framg√•ngsrikt'}
            
            elif inneh√•ll_typ == 'svar':
                if inneh√•ll_id in self.forum_svar:
                    svar = self.forum_svar[inneh√•ll_id]
                    svar.modererad = moderering.get('godk√§nd', False)
                    
                    return {'meddelande': 'Svar modererat framg√•ngsrikt'}
            
            return {'fel': 'Inneh√•ll inte hittat'}
            
        except Exception as e:
            logger.error(f"Fel vid moderering: {e}")
            return {'fel': str(e)}
    
    def h√§mta_community_statistik(self) -> Dict[str, Any]:
        """H√§mtar statistik √∂ver community-aktivitet"""
        nu = datetime.now()
        senaste_vecka = nu - timedelta(days=7)
        senaste_m√•nad = nu - timedelta(days=30)
        
        tr√•dar_senaste_vecka = len([t for t in self.forum_tr√•dar.values() 
                                   if t.skapad >= senaste_vecka])
        tr√•dar_senaste_m√•nad = len([t for t in self.forum_tr√•dar.values() 
                                   if t.skapad >= senaste_m√•nad])
        
        svar_senaste_vecka = len([s for s in self.forum_svar.values() 
                                if s.skapad >= senaste_vecka])
        svar_senaste_m√•nad = len([s for s in self.forum_svar.values() 
                                if s.skapad >= senaste_m√•nad])
        
        return {
            'forum': {
                'total_tr√•dar': len(self.forum_tr√•dar),
                'total_svar': len(self.forum_svar),
                'tr√•dar_senaste_vecka': tr√•dar_senaste_vecka,
                'tr√•dar_senaste_m√•nad': tr√•dar_senaste_m√•nad,
                'svar_senaste_vecka': svar_senaste_vecka,
                'svar_senaste_m√•nad': svar_senaste_m√•nad,
                'aktiva_kategorier': len([k for k in self.forum_kategorier.values() if k.aktiv])
            },
            'privata_cirklar': {
                'total_cirklar': len(self.privata_cirklar),
                'aktiva_cirklar': len([c for c in self.privata_cirklar.values() if c.aktiv]),
                'total_medlemmar': sum(len(c.medlemmar) for c in self.privata_cirklar.values())
            },
            'genererat_datum': nu.isoformat()
        }
    
    def _tr√•d_till_dict(self, tr√•d: ForumTr√•d) -> Dict[str, Any]:
        """Konverterar ForumTr√•d till dictionary"""
        return {
            'id': tr√•d.id,
            'kategori_id': tr√•d.kategori_id,
            'skapare_id': tr√•d.skapare_id,
            'titel': tr√•d.titel,
            'inneh√•ll': tr√•d.inneh√•ll,
            'st√§ngd': tr√•d.st√§ngd,
            'pinnad': tr√•d.pinnad,
            'skapad': tr√•d.skapad.isoformat(),
            'senast_svar': tr√•d.senast_svar.isoformat(),
            'antal_svar': tr√•d.antal_svar,
            'antal_visningar': tr√•d.antal_visningar,
            'modererad': tr√•d.modererad
        }
    
    def _svar_till_dict(self, svar: ForumSvar) -> Dict[str, Any]:
        """Konverterar ForumSvar till dictionary"""
        return {
            'id': svar.id,
            'tr√•d_id': svar.tr√•d_id,
            'f√∂rfattare_id': svar.f√∂rfattare_id,
            'inneh√•ll': svar.inneh√•ll,
            'modererad': svar.modererad,
            'skapad': svar.skapad.isoformat(),
            'redigerad': svar.redigerad.isoformat() if svar.redigerad else None
        }
    
    def _cirkel_till_dict(self, cirkel: PrivatCirkel) -> Dict[str, Any]:
        """Konverterar PrivatCirkel till dictionary"""
        return {
            'id': cirkel.id,
            'namn': cirkel.namn,
            'beskrivning': cirkel.beskrivning,
            'skapare_id': cirkel.skapare_id,
            'medlemmar': cirkel.medlemmar,
            'antal_medlemmar': len(cirkel.medlemmar),
            'privat': cirkel.privat,
            'skapad': cirkel.skapad.isoformat(),
            'aktiv': cirkel.aktiv
        }

class CommunityAPI:
    """API f√∂r Community-funktionalitet"""
    
    def __init__(self):
        self.community_manager = CommunityManager()
    
    def h√§mta_forum_√∂versikt(self) -> Dict[str, Any]:
        """H√§mtar √∂versikt √∂ver forumet"""
        kategorier = self.community_manager.h√§mta_kategorier()
        statistik = self.community_manager.h√§mta_community_statistik()
        
        return {
            'kategorier': kategorier,
            'statistik': statistik,
            'senaste_tr√•dar': self._h√§mta_senaste_tr√•dar(5)
        }
    
    def _h√§mta_senaste_tr√•dar(self, antal: int) -> List[Dict[str, Any]]:
        """H√§mtar de senaste tr√•darna"""
        tr√•dar = list(self.community_manager.forum_tr√•dar.values())
        tr√•dar.sort(key=lambda t: t.skapad, reverse=True)
        
        return [self.community_manager._tr√•d_till_dict(t) for t in tr√•dar[:antal]]
    
    def skapa_forumtr√•d(self, kategori_id: str, skapare_id: str, 
                       titel: str, inneh√•ll: str) -> Dict[str, Any]:
        """Skapar en ny forumtr√•d"""
        return self.community_manager.skapa_tr√•d(kategori_id, skapare_id, titel, inneh√•ll)
    
    def h√§mta_forumtr√•dar(self, kategori_id: str = None, 
                         sida: int = 1, per_sida: int = 20) -> Dict[str, Any]:
        """H√§mtar forumtr√•dar med paginering"""
        return self.community_manager.h√§mta_tr√•dar(kategori_id, sida, per_sida)
    
    def h√§mta_forumtr√•d(self, tr√•d_id: str) -> Optional[Dict[str, Any]]:
        """H√§mtar en specifik forumtr√•d med svar"""
        return self.community_manager.h√§mta_tr√•d(tr√•d_id)
    
    def skapa_forumsvar(self, tr√•d_id: str, f√∂rfattare_id: str, 
                       inneh√•ll: str) -> Dict[str, Any]:
        """Skapar ett svar p√• en forumtr√•d"""
        return self.community_manager.skapa_svar(tr√•d_id, f√∂rfattare_id, inneh√•ll)
    
    def skapa_privat_cirkel(self, namn: str, beskrivning: str, 
                           skapare_id: str, medlemmar: List[str]) -> Dict[str, Any]:
        """Skapar en privat cirkel"""
        return self.community_manager.skapa_privat_cirkel(namn, beskrivning, skapare_id, medlemmar)
    
    def h√§mta_anv√§ndares_cirklar(self, anv√§ndare_id: str) -> List[Dict[str, Any]]:
        """H√§mtar cirklar som anv√§ndaren √§r medlem i"""
        return self.community_manager.h√§mta_anv√§ndares_cirklar(anv√§ndare_id)
    
    def l√§gg_till_medlem_i_cirkel(self, cirkel_id: str, anv√§ndare_id: str) -> Dict[str, Any]:
        """L√§gger till en medlem i en privat cirkel"""
        return self.community_manager.l√§gg_till_medlem_i_cirkel(cirkel_id, anv√§ndare_id)
    
    def ta_bort_medlem_fr√•n_cirkel(self, cirkel_id: str, anv√§ndare_id: str) -> Dict[str, Any]:
        """Tar bort en medlem fr√•n en privat cirkel"""
        return self.community_manager.ta_bort_medlem_fr√•n_cirkel(cirkel_id, anv√§ndare_id)
    
    def moderera_inneh√•ll(self, inneh√•ll_id: str, inneh√•ll_typ: str, 
                          moderering: Dict[str, Any]) -> Dict[str, Any]:
        """Modererar forumtr√•dar och svar"""
        return self.community_manager.moderera_inneh√•ll(inneh√•ll_id, inneh√•ll_typ, moderering)
    
    def h√§mta_community_statistik(self) -> Dict[str, Any]:
        """H√§mtar statistik √∂ver community-aktivitet"""
        return self.community_manager.h√§mta_community_statistik()

# Exempel p√• anv√§ndning
if __name__ == "__main__":
    # Skapa Community API
    community = CommunityAPI()
    
    # H√§mta forum√∂versikt
    √∂versikt = community.h√§mta_forum_√∂versikt()
    print(f"Forumkategorier: {len(√∂versikt['kategorier'])}")
    
    # Skapa en forumtr√•d
    anv√§ndare_id = "test-user-123"
    tr√•d_resultat = community.skapa_forumtr√•d(
        "allm√§nt", 
        anv√§ndare_id, 
        "V√§lkommen till Neuroljus Neurohus!",
        "Hej alla! Jag √§r s√• glad att vi √§ntligen har en plattform d√§r vi kan dela erfarenheter och st√∂dja varandra. L√•t oss bygga en stark gemenskap tillsammans!"
    )
    
    if 'fel' not in tr√•d_resultat:
        tr√•d_id = tr√•d_resultat['tr√•d_id']
        print(f"Skapade tr√•d: {tr√•d_resultat['tr√•d']['titel']}")
        
        # Skapa ett svar
        svar_resultat = community.skapa_forumsvar(
            tr√•d_id,
            "test-user-456",
            "Tack f√∂r v√§lkomstmeddelandet! Jag ser fram emot att l√§ra mig mer om empatisk kommunikation."
        )
        
        if 'fel' not in svar_resultat:
            print(f"Skapade svar: {svar_resultat['svar']['inneh√•ll'][:50]}...")
    
    # Skapa en privat cirkel
    cirkel_resultat = community.skapa_privat_cirkel(
        "Familjer i Stockholm",
        "En cirkel f√∂r familjer i Stockholm som vill dela erfarenheter om LSS-omsorg",
        anv√§ndare_id,
        ["test-user-456", "test-user-789"]
    )
    
    if 'fel' not in cirkel_resultat:
        print(f"Skapade privat cirkel: {cirkel_resultat['cirkel']['namn']}")
    
    # H√§mta statistik
    statistik = community.h√§mta_community_statistik()
    print(f"Total tr√•dar: {statistik['forum']['total_tr√•dar']}")
    print(f"Total svar: {statistik['forum']['total_svar']}")
    print(f"Privata cirklar: {statistik['privata_cirklar']['total_cirklar']}")
    
    print("Community-modulen initialiserad och redo!")
